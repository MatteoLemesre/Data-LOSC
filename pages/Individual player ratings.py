import streamlit as st
import pandas as pd
import os

# ------------------------- Functions -------------------------
def add_average(df):
    avg = round(df["Rating"].mean(), 2)
    df_result = df[["Player", "Rating"]].copy()
    df_result = df_result.set_index("Player")
    df_result.loc["Average"] = avg
    return df_result

def load_league_file(path, league):
    file_path = os.path.join(path, f"{league}_games.csv")
    if not os.path.exists(file_path):
        st.error(f"No file found for {league}")
        st.stop()
    return pd.read_csv(file_path)

def get_match_info(df, home, away):
    match = df[(df["Home Team"] == home) & (df["Away Team"] == away)]
    return match.iloc[0] if not match.empty else {}

# ------------------------- Streamlit App -------------------------
st.set_page_config(page_title="Individual Player Ratings")
st.title("ðŸ“Š Individual Player Ratings")
st.markdown("""
This page lets you explore **individual player ratings** for selected matches across different leagues and matchdays.

- You can filter by league, game week, and match to view the specific game you're interested in.
- For each match, youâ€™ll see the **average rating** of each team and their individual player ratings.
- The **ratings are generated by a custom algorithm** designed to reflect performance â€” they are **subjective** and should not be considered absolute truth.
- For the competitions concerned, the Final is on J17, the Second Leg of the Semi-final is on J16, the First Leg of the Semi-final is on J15...
""")

st.sidebar.title("ðŸŽ¯ Select Parameters")

selected_season = st.sidebar.selectbox("Season", ["2025 2026", "2024 2025", "2023 2024"], index=1)

season = None
if selected_season == "2023 2024":
    season_code = "23_24"
elif selected_season == "2024 2025":
    season_code = "24_25"
elif selected_season == "2025 2026":
    season_code = "25_26"

base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "csv", f"csv{season_code}"))
path_players = os.path.join(base_path, "ratings", "data_players.csv")
path_goalkeepers = os.path.join(base_path, "ratings", "data_goals.csv")
path_leagues = os.path.join(base_path, "leagues_games")

df_players = pd.read_csv(path_players)
df_gk = pd.read_csv(path_goalkeepers)
df_all = pd.concat([df_players, df_gk], ignore_index=True)

available_leagues = df_players["League"].dropna().unique().tolist()
selected_leagues = st.sidebar.multiselect("League", available_leagues)

if selected_leagues:
    df_games = pd.concat(
        [load_league_file(path_leagues, league).assign(League=league) for league in selected_leagues],
        ignore_index=True
    )

    available_weeks = sorted(df_games["Game Week"].dropna().unique(), key=lambda x: int(str(x).strip("J").strip()))
    selected_weeks = st.sidebar.multiselect("Game Week", available_weeks)

    if selected_weeks:
        df_week = df_games[df_games["Game Week"].isin(selected_weeks)]

        df_week["Match Label"] = df_week["Home Team"] + " vs " + df_week["Away Team"]
        match_labels = df_week["Match Label"].tolist()
        selected_matches = st.sidebar.multiselect("Match", match_labels)

        for match_label in selected_matches:
            try:
                home_team, away_team = match_label.split(" vs ")
            except ValueError:
                st.warning(f"Invalid match format: {match_label}")
                continue

            match_info = get_match_info(df_week, home_team, away_team)
            league = match_info.get("League", "N/A")
            game_week = match_info.get("Game Week", "N/A")

            st.write(f"## {home_team} vs {away_team}")
            st.write(f"**Score:** {match_info.get('Score', 'N/A')} | "
                     f"**Referee:** {match_info.get('Referee', 'N/A')} | **Attendance:** {match_info.get('Attendance', 'N/A')} | "
                     f"**Venue:** {match_info.get('Venue', 'N/A')}")

            df_home = df_all[
                (df_all["Team"] == home_team) &
                (df_all["Game Week"] == game_week) &
                (df_all["League"] == league)
            ].drop(columns=["ID"], errors="ignore")

            df_away = df_all[
                (df_all["Team"] == away_team) &
                (df_all["Game Week"] == game_week) &
                (df_all["League"] == league)
            ].drop(columns=["ID"], errors="ignore")

            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"### {home_team}")
                st.dataframe(add_average(df_home.sort_values(by="Rating", ascending=False)), use_container_width=True)

            with col2:
                st.markdown(f"### {away_team}")
                st.dataframe(add_average(df_away.sort_values(by="Rating", ascending=False)), use_container_width=True)

